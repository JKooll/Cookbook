public class AcyclicSP
{
  private DirectedEdge[] edgeTo;
  private double[] distTo;

  public AcyclicSP(EdgeWeightedDigraph G, int s)
  {
    edgeTo = new DirectedEdge[G.V()];
    distTo = new double[G.V()];

    for (int v = 0; v < G.V(); v++) {
      distTo[v] = Double.POSITIVE_INFINITY;
    }
    distTo[s] = 0.0;

    Topological top = new Topological(G); 

    for (int v: top.order()) {
      relax(G, v);
    }
  }

  // distance from s to v, âˆž if not path
  public double distTo(int v)
  {
    return distTo[v];
  }

  // path from s to v ?
  public boolean hasPathTo(int v)
  {
    return distTo[v] < Double.POSITIVE_INFINITY;
  }

  // path from s to v, null if none
  public Iterable<DirectedEdge> pathTo(int v)
  {
    if (!hasPathTo(v)) {
      return null;
    }
    Stack<DirectedEdge> path = new Stack<DirectedEdge>();
    for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {
      path.push(e);
    }
    return path;
  }

  // edge relaxation
  private void relax(DirectedEdge e) 
  {
    int v = e.from(), w = e.to();
    if (distTo[w] > distTo[v] + e.weight())
    {
      distTo[w] = distTo[v] + e.weight();
      edgeTo[w] = e;
    }
  }

  // vertex relaxation
  private void relax(EdgeWeightedDigraph G, int v)
  {
    for (DirectedEdge e: G.adj(v)) {
      int w = e.to();
      if (distTo[w] > distTo[v] + e.weight()) {
        distTo[w] = distTo[v] + e.weight();
        edgeTo[w] = e;
        if (pq.contains(w)) {
          pq.change(w, distTo[w]);
        } else {
          pq.insert(w, distTo[w]);
        }
      }
    }
  }
}