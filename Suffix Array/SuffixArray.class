public class SuffixArray
{
  private final String[] suffixes; // suffix array
  private final int N; // length of string (and array)

  // build suffix array for text
  public SuffixArray(String text)
  {
    N = s.length();
    suffixes = new String[N];
    for (int i = 0; i < N; i++) {
      suffixes[i] = s.substring(i);
    }
    Quick3way.sort(suffixes);
  }
  
  // length of text
  public int lenght()
  {
    return N;
  }

  // ith in the suffix array (i between 0 and N-1)
  public String select(int i)
  {
    return suffixes[i];
  }

  // index of select(i) (i between 0 and N-1)
  public int index(int i)
  {
    return N - suffixes[i].length();
  }

  // length of longest common prefix of select(i) and select(i - 1)(i between 1 and N - 1)
  private int lcp(String s, String t)
  {
    int N = Math.min(s.length(), t.length());
    for (int i = 0; i < N; i++) {
      if (s.charAt(i) != t.charAt(i)) {
        return i;
      }
      return N;
    }
  }

  public int lcp(int i)
  {
    return lcp(suffixes[i], suffixes[i - 1]);
  }

  // number of suffixes less than key
  public int rank(String key)
  {
    int lo = 0, hi = N - 1;
    while (lo <= hi) {
      int mid = lo + (hi - lo) / 2;
      int cmp = key.compareTo(suffixes[mid]);
      if (cmp < 0) hi = mid - 1;
      else if (cmp > 0) lo = mid + 1;
      else return mid;
    }
    return lo;
  }
}