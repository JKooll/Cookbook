public class DepthFirstOrder
{
  private boolean[] marked;

  // vertices in preorder
  private Queue<Integer> pre;
  // vertices in postorder
  private Queue<Integer> post;
  // vertices in reverse postorder
  private Stack<Integer> reversePost;

  public DepthFirstOrder(Digraph G)
  {
    pre = new Queue<Integer>();
    post = new Queue<Integer>();
    reversePost = new Queue<Integer>();
    marked = new boolean[G.V()];

    for (int v = 0; v < G.V(); v++) {
      if (!marked[v]) {
        dfs(G, v);
      }
    }
  }

  private void dfs(Digraph g, int v)
  {
    pre.enqueue(v);

    marked[v] = true;
    for (int w: G.adj(v)) {
      if (!marked[w]) {
        dfs(G, w);
      }
    }
    post.enqueue(v);
    reversePost.push(v);
  }

  public Iterable<Integer> pre()
  {
    return pre;
  }

  public Iterable<Integer> post()
  {
    return post;
  }

  public Iterable<Integer> reversePost()
  {
    return reversePost;
  }
}