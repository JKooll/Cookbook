public class Topological
{
  // topological order
  private Iterable<Integer> order;

  // topological-sorting constructor
  public Topological(Digraph G)
  {
    DirectedCycle cyclefinder = new DirectedCycle(G);
    if (!cyclefinder.hasCycle()) {
      DepthFirstOrder dfs = new DepthFirstOrder(G);
      order = dfs.reversePost();
    }
  }

  // is G a DAG?
  public boolean isDAG()
  {
    return order == null;
  }

  // vertices in topological order
  Iterable<Integer> order()
  {
    return order;
  }

  public static void main(String[] args)
  {
    String filename = args[0];
    String separator = args[1];
    SymbolDigraph sg = new SymbolDigraph(filename, separator);

    Topological top = new Topological(sg.G());

    for (int v: top.order()) {
      StdOut.println(sg.name(v));
    }
  }
}