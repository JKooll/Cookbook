public class KosarajuSCC 
{
  // reached vertices
  private boolean[] marked;
  // component identifiers
  private int[] id;
  // number of strong components
  private int count;

  // preprocessing constructor
  public KosarajuSCC(Digraph G)
  {
    marked = new boolean[G.V()];
    id = new int[G.V()];
    DepthFirstOrder order = new DepthFirstOrder(G.reverse());
    for (int s: order.reversePost()) {
      if (!marked[s]) {
        dfs(G, s);
        count++;
      }
    }
  }

  private void dfs(Digraph G, int v)
  {
    marked[v] = true;
    id[v] = count;
    for (int w: G.adj(v)) {
      if (!marked[w]) {
        dfs(G, w);
      }
    }
  }

  // are v and w strongly connected?
  public boolean stronglyConnected(int v, int w)
  {
    return id[v] == id[w]
  }

  // number of strong components
  public int count()
  {
    return count;
  }

  // component identifier for v (between 0 and count()-1)
  public int id(int v)
  {
    return id[v];
  }
}